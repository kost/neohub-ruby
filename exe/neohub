#!/usr/bin/env ruby

require "bundler/setup"
require "neohub"

$PRGNAME='neohub'

# helpful class for logger
class MultiDelegator
	def initialize(*targets)
		@targets = targets
	end

	def self.delegate(*methods)
		methods.each do |m|
			define_method(m) do |*args|
				@targets.map { |t| t.send(m, *args) }
			end
		end
		self
	end

	class <<self
		alias to new
	end
end

# default $options
$options = {}
$options[:loglevel] = 'WARN'
$options[:logname] = nil
$options[:autologin] = true
$options[:devkey] = nil

$confyaml=ENV['HOME']+'/.neohub'

begin
	optyaml = YAML::load_file($confyaml)
rescue # Errno::ENOENT
end

if optyaml != nil then
	$options.merge!(optyaml)
end

# initialize logger
if $options[:logname] != nil then
	log_file = File.open($options['logname'], 'a')
	@log = Logger.new MultiDelegator.delegate(:write, :close).to(STDERR, log_file)
else
	@log = Logger.new MultiDelegator.delegate(:write, :close).to(STDERR)
end
loglevel =  Logger.const_get $options[:loglevel] # Logger::INFO # default is ::WARN
@log.level = loglevel

# pp $options

OptionParser.new do |opts|
	opts.banner = "Usage: #{$PRGNAME} [options]"

	opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
		$options['verbose'] = v
		@log.level = Logger::INFO
	end

	opts.on("-d", "--[no-]debug", "Run in debug mode") do |v|
		$options['debug'] = v
		@log.level = Logger::DEBUG
	end

	opts.on("-h", "--help", "Prints this help") do
		puts opts
		exit
	end

	opts.on("-a", "--[no-]autologin", "auto login") do |v|
		$options[:autologin] = v
	end

	opts.on("-k", "--devkey KEY", "specify DEVKEY") do |optarg|
		$options[:devkey] = optarg
	end

	opts.on("-c", "--command COMMAND", "specify COMMAND") do |optarg|
		$options[:command] = optarg
	end

	opts.on("-i", "--info", "specify DEVKEY") do |optarg|
		$options[:info] = optarg
	end

	opts.on("-u", "--user USERNAME", "specify USERNAME") do |optarg|
		$options[:user] = optarg
	end

	opts.on("-p", "--pass PASSWORD", "specify PASSWORD") do |optarg|
		$options[:pass] = optarg
	end

	opts.on("-U", "--url URL", "use URL for connecting") do |optarg|
		$options[:url] = optarg
	end

	opts.on("-l", "--log FILE", "log to FILE") do |optarg|
		$options[:logname] = optarg
	end

	opts.separator ""
	opts.separator "Example #1: #{$PRGNAME} -k 1 -u user -p password"
end.parse!

# pp $options

# for future use
if ARGV.empty?
else
end

$n=Neohub::Neohub.new($options)

if $options.has_key?(:pass) and $options[:autologin] then

if $options[:info] then
	puts $n.getdevices()
end


